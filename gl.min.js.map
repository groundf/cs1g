{
  "version": 3,
  "sources": ["gl.js"],
  "sourcesContent": ["//\"use strict\";\r\n\r\n\r\nexport function test() {\r\n    console.log(\"It works\")\r\n}\r\n\r\n\r\n/**\r\n *\r\n * WebGL types and functions.\r\n \r\n*  WebGLRenderingContextBase\r\n*/\r\n\r\n/**\r\n * Create shader of a given type from GLSL source.\r\n *  \r\n * @param {WebGL2RenderingContext} context The WebGL rendering context.\r\n * @param {WebGL2RenderingContext.VERTEX_SHADER | WebGL2RenderingContext.FRAGMENT_SHADER} shaderType The shader type numeric constant.\r\n * @param {String} shaderSource The GLSL shader source.\r\n * @throws Will throw error message when shader was not compiled.\r\n * @returns {WebGLShader} The compiled vertex or fragment shader which can be attached to WebGLProgram.\r\n */\r\nexport function createShader(context, shaderType, shaderSource) {\r\n    let shader = context.createShader(shaderType);\r\n    \r\n    if (shader == null) {\r\n        throw \"Could not create shader!\";\r\n    }\r\n    context.shaderSource(shader, shaderSource);\r\n    context.compileShader(shader);\r\n    \r\n    // Check the compilation errors.  \r\n    let status = context.getShaderParameter(shader, context.COMPILE_STATUS);\r\n    if (!status) {\r\n        var info = context.getShaderInfoLog(shader);\r\n        context.deleteShader(shader);\r\n        throw \"Could not compile shader! \".concat(info);\r\n    }\r\n    return shader;\r\n}\r\n\r\n/**\r\n * Create shader program from given vertex and fragment shaders.\r\n * \r\n * @param {WebGL2RenderingContext}\r\n * @param {WebGLShader} vertexShader The vertex shader.\r\n * @param {WebGLShader} fragmentShader The fragment shader.\r\n * @throws Will throw erro message when program was not linded. \r\n * @returns {WebGLProgram}\r\n */\r\nexport function createShaderProgram(context, vertexShader, fragmentShader) {\r\n    let program = context.createProgram();\r\n    \r\n    if (program == null) {\r\n        throw \"Could not create shader program!\";\r\n    }\r\n\r\n    /* /Check vertex shader types/ */\r\n    context.attachShader(program, vertexShader);\r\n    context.attachShader(program, fragmentShader);\r\n    context.linkProgram(program);\r\n    \r\n    let status = context.getProgramParameter(program, context.LINK_STATUS);\r\n    \r\n    if (!status) {\r\n        context.deleteProgram(program);\r\n        throw \"Could not link shader program!\";\r\n    }\r\n\r\n    return program;\r\n}\r\n\r\n/**\r\n * Create shader program from given vertex and fragment shader sources.\r\n */\r\nexport function createShaderProgramFromSources(context, vertexShaderSource, fragmentShaderSource) {\r\n    let vertexShader = createShader(context, context.VERTEX_SHADER, vertexShaderSource);\r\n    let fragmentShader = createShader(context, context.FRAGMENT_SHADER, fragmentShaderSource);\r\n    let shaderProgram = createShaderProgram(context, vertexShader, fragmentShader);\r\n\r\n    return shaderProgram;\r\n}\r\n\r\n/**\r\n * Resize canvas to the display size (pixels).\r\n */\r\nexport function resizeCanvasToDisplaySize(canvas) {\r\n    // Lookup the size the browser is displaying the canvas in CSS pixels.\r\n    var displayWidth = canvas.clientWidth;\r\n    var displayHeight = canvas.clientHeight;\r\n    // Check if the canvas is not the same size.\r\n    var needResize = canvas.width !== displayWidth ||\r\n        canvas.height !== displayHeight;\r\n    if (needResize) {\r\n        // Make the canvas the same size\r\n        canvas.width = displayWidth;\r\n        canvas.height = displayHeight;\r\n    }\r\n    return needResize;\r\n}\r\n\r\nexport function setup(selector) {\r\n    var canvas = document.querySelector(selector);\r\n    if (canvas == null) {\r\n        throw \"Could not find canvas!\";\r\n    }\r\n    var context = canvas.getContext(\"webgl2\", { alpha: false });\r\n    if (context == null) {\r\n        throw \"Could not create context!\";\r\n    }\r\n    return context;\r\n}\r\n\r\n// Render the scene graph.\r\nexport function _render() {\r\n}\r\n\r\n/* ----------------------------------------------------------------------- */ \r\n\r\n/**\r\n * Math module\r\n * \r\n */\r\n\r\n/** \r\n * Calculate the square of number. \r\n * \r\n * @param {Number} x The number to be squared.\r\n * @returns {Number} The squred number.\r\n */\r\nexport function square(x) { return x * x; };\r\n\r\n/**\r\n * Calculate squared Euclidean distance (SED) between points/vectors.\r\n *\r\n * @param {Number} a The input point/vector\r\n * @param {Number} b The input point/vector\r\n * @returns {Number} The squared Euclidean distance between points/vectors. \r\n*/\r\nexport function distanceSquared(a, b) {\r\n    return square(a.x - b.x) + square(a.y - b.y); \r\n}\r\n\r\n/**\r\n * Calculate Euclidean distance (ED) between points/vectors.\r\n *\r\n * @param {Number} a the input point/vector\r\n * @param {Number} b the input point/vector\r\n * @returns {Number} The Euclidean distance between points/vectors. \r\n */\r\nexport function distance(a, b) {\r\n    return Math.sqrt(distanceSquared(a, b));\r\n}\r\n\r\n// Old school class definition.\r\nvar Cursor = /** @class */ (function () {\r\n    function Cursor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    return Cursor;\r\n})\r\n"],
  "mappings": "AAGO,SAASA,GAAO,CACnB,QAAQ,IAAI,UAAU,CAC1B,CAmBO,SAASC,EAAaC,EAASC,EAAYC,EAAc,CAC5D,IAAIC,EAASH,EAAQ,aAAaC,CAAU,EAE5C,GAAIE,GAAU,KACV,KAAM,2BAOV,GALAH,EAAQ,aAAaG,EAAQD,CAAY,EACzCF,EAAQ,cAAcG,CAAM,EAIxB,CADSH,EAAQ,mBAAmBG,EAAQH,EAAQ,cAAc,EACzD,CACT,IAAII,EAAOJ,EAAQ,iBAAiBG,CAAM,EAC1C,MAAAH,EAAQ,aAAaG,CAAM,EACrB,6BAA6B,OAAOC,CAAI,EAElD,OAAOD,CACX,CAWO,SAASE,EAAoBL,EAASM,EAAcC,EAAgB,CACvE,IAAIC,EAAUR,EAAQ,cAAc,EAEpC,GAAIQ,GAAW,KACX,KAAM,mCAUV,GANAR,EAAQ,aAAaQ,EAASF,CAAY,EAC1CN,EAAQ,aAAaQ,EAASD,CAAc,EAC5CP,EAAQ,YAAYQ,CAAO,EAIvB,CAFSR,EAAQ,oBAAoBQ,EAASR,EAAQ,WAAW,EAGjE,MAAAA,EAAQ,cAAcQ,CAAO,EACvB,iCAGV,OAAOA,CACX,CAKO,SAASC,EAA+BT,EAASU,EAAoBC,EAAsB,CAC9F,IAAIL,EAAeP,EAAaC,EAASA,EAAQ,cAAeU,CAAkB,EAC9EH,EAAiBR,EAAaC,EAASA,EAAQ,gBAAiBW,CAAoB,EAGxF,OAFoBN,EAAoBL,EAASM,EAAcC,CAAc,CAGjF,CAKO,SAASK,EAA0BC,EAAQ,CAE9C,IAAIC,EAAeD,EAAO,YACtBE,EAAgBF,EAAO,aAEvBG,EAAaH,EAAO,QAAUC,GAC9BD,EAAO,SAAWE,EACtB,OAAIC,IAEAH,EAAO,MAAQC,EACfD,EAAO,OAASE,GAEbC,CACX,CAEO,SAASC,EAAMC,EAAU,CAC5B,IAAIL,EAAS,SAAS,cAAcK,CAAQ,EAC5C,GAAIL,GAAU,KACV,KAAM,yBAEV,IAAIb,EAAUa,EAAO,WAAW,SAAU,CAAE,MAAO,EAAM,CAAC,EAC1D,GAAIb,GAAW,KACX,KAAM,4BAEV,OAAOA,CACX,CAGO,SAASmB,GAAU,CAC1B,CAeO,SAASC,EAAOC,EAAG,CAAE,OAAOA,EAAIA,CAAG,CASnC,SAASC,EAAgBC,EAAGC,EAAG,CAClC,OAAOJ,EAAOG,EAAE,EAAIC,EAAE,CAAC,EAAIJ,EAAOG,EAAE,EAAIC,EAAE,CAAC,CAC/C,CASO,SAASC,EAASF,EAAGC,EAAG,CAC3B,OAAO,KAAK,KAAKF,EAAgBC,EAAGC,CAAC,CAAC,CAC1C",
  "names": ["test", "createShader", "context", "shaderType", "shaderSource", "shader", "info", "createShaderProgram", "vertexShader", "fragmentShader", "program", "createShaderProgramFromSources", "vertexShaderSource", "fragmentShaderSource", "resizeCanvasToDisplaySize", "canvas", "displayWidth", "displayHeight", "needResize", "setup", "selector", "_render", "square", "x", "distanceSquared", "a", "b", "distance"]
}
