function l(){console.log("It works")}function u(r,t,a){let e=r.createShader(t);if(e==null)throw"Could not create shader!";if(r.shaderSource(e,a),r.compileShader(e),!r.getShaderParameter(e,r.COMPILE_STATUS)){var i=r.getShaderInfoLog(e);throw r.deleteShader(e),"Could not compile shader! ".concat(i)}return e}function n(r,t,a){let e=r.createProgram();if(e==null)throw"Could not create shader program!";if(r.attachShader(e,t),r.attachShader(e,a),r.linkProgram(e),!r.getProgramParameter(e,r.LINK_STATUS))throw r.deleteProgram(e),"Could not link shader program!";return e}function s(r,t,a){let e=u(r,r.VERTEX_SHADER,t),o=u(r,r.FRAGMENT_SHADER,a);return n(r,e,o)}function f(r){var t=r.clientWidth,a=r.clientHeight,e=r.width!==t||r.height!==a;return e&&(r.width=t,r.height=a),e}function g(r){var t=document.querySelector(r);if(t==null)throw"Could not find canvas!";var a=t.getContext("webgl2",{alpha:!1});if(a==null)throw"Could not create context!";return a}function S(){}function h(r){return r*r}function d(r,t){return h(r.x-t.x)+h(r.y-t.y)}function p(r,t){return Math.sqrt(d(r,t))}export{S as _render,u as createShader,n as createShaderProgram,s as createShaderProgramFromSources,p as distance,d as distanceSquared,f as resizeCanvasToDisplaySize,g as setup,h as square,l as test};
//# sourceMappingURL=gl.min.js.map
